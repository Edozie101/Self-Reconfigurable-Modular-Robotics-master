package modular.graphics;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.PerspectiveCamera;
import com.badlogic.gdx.graphics.g3d.Environment;
import com.badlogic.gdx.graphics.g3d.ModelBatch;
import com.badlogic.gdx.graphics.g3d.attributes.ColorAttribute;
import com.badlogic.gdx.graphics.g3d.environment.DirectionalLight;
import com.badlogic.gdx.graphics.g3d.utils.CameraInputController;
import com.badlogic.gdx.utils.Disposable;

import modular.util.Constants;

/**
 * @author Group2
 * @version 1.3
 *	Renderer attempts to render the scene given an initial state generated by the WorldInitialization, generating a camera based on field size, its controller and the general lighting environment.
 */
public class WorldRenderer implements Disposable{
	/**
	 * Reference to the initial state of the world and, more importantly, to the board state.
	 */
	public final WorldInitialization world;
	/**
	 * The environment used to generate the lighting.
	 */
	private Environment environment;
	/**
	 * The perspective camera for the scene.
	 */
	private PerspectiveCamera cam;
	/**
	 * The camera controller, using stadard keys (WASD and mouse movements).
	 */
	private CameraInputController camController;
	/**
	 * The model renderer.
	 */
	private ModelBatch modelBatch;
	
	
	/**
	 * Initialises and renders the world..
	 * @param world represents the initial state of the board, used for rendering.
	 */
	public WorldRenderer(WorldInitialization world){
		this.world = world;
		init();
	}
	
	/**
	 * Initialises the various instance fields and sets up the environment, camera and camera controller.
	 */
	public void init(){
		modelBatch = new ModelBatch();
		
		setLight();
		setCamera();
		
		
		camController = new CameraInputController(cam);
		Gdx.input.setInputProcessor(camController);
	}
	
	/**
	 * Renders the various objects. 
	 */
	public void render(){
		renderObjects();
	}
	
	/**
	 * Changes the size of the window to match the given parameters.
	 * @param width
	 * @param height
	 */
	public void resize(int width, int height){
		cam.viewportWidth = Constants.VIEWPORT_HEIGHT / height * width;
		cam.update();
	}
	
	/**
	 * @see com.badlogic.gdx.utils.Disposable#dispose()
	 */
	@Override
	public void dispose(){
		modelBatch.dispose();
	}
	
	/**
	 * Sets up the camera based on the (constant) field size.
	 */
	private void setCamera () {
		cam = new PerspectiveCamera(67, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
		cam.position.set(11f - Constants.SIZE, 20f, Constants.SIZE + 6f);
		cam.lookAt(Constants.SIZE/2,0f,Constants.SIZE/2);
		cam.near = 0.1f;
		cam.far = 300f;
		cam.update();
	}
	/**
	 * Sets up the ambient light to improve the looks of the board.
	 */
	private void setLight () {
		environment = new Environment();
		environment.set(new ColorAttribute(ColorAttribute.AmbientLight, 0.4f, 0.4f, 0.4f, 1f));
		environment.add(new DirectionalLight().set(0.8f, 0.8f, 0.8f, -1f, -0.8f, -0.2f));
	}
	
	/**
	 * Renders the objects graphically.
	 */
	private void renderObjects(){
		camController.update();
		Gdx.gl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT | GL20.GL_DEPTH_BUFFER_BIT);
		modelBatch.begin(cam);
		modelBatch.render(world.instances, environment);
		modelBatch.end();
	}
}
